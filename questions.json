[
  {
    "id": 1,
    "title": "Sum 2 CLI arguments [EASY]",
    "code": "const args = process.argv.slice(2);\n// console.log(args)\n\nconst num1 = Number(args[0]);\nconst num2 = Number(args[1]);\n\nconst sum = num1 + num2;\n\nconsole.log(sum);"
  },
  {
    "id": 2,
    "title": "Sum 2 numbers from files and save result [EASY]",
    "code": "const fs = require('fs');\n\nconst data1 = fs.readFileSync('./file1.txt', 'utf8');\nconst data2 = fs.readFileSync('./file2.txt', 'utf8');\n\nconst num1 = Number(data1);\nconst num2 = Number(data2);\n\nconst sum = num1 + num2;\n\nconst result = sum.toString();\n\nfs.writeFileSync('./result.txt', result);"
  },
  {
    "id": 3,
    "title": "Async Todo Creation with File Append [MEDIUM]",
    "code": "const fs = require(\"fs\");\nconst path = require(\"path\");\n\nconst DB_FILE_PATH = path.join(__dirname, \"db.txt\");\n\n/**\n * Converts an array of todo objects into a newline-separated string,\n * where each todo object is formatted as pretty-printed JSON.\n * This format is compatible with the expected structure of the db.txt file.\n *\n * @param {Array<Object>} Json - Array of todo objects to be converted.\n * @returns {string} Newline-separated JSON strings representing todos.\n */\nfunction JsonToDbText(Json){\n  let text = \"\";\n  Json.forEach((todo) => {\n    text += JSON.stringify(todo, null, 2) + \"\\n\";\n  });\n  return text;\n};\n\nconst createTodo = (todo) => {\n  return new Promise((res, rej) => {\n    const toDoObj = {\n      id: Date.now(),\n      title: todo,\n      isCompleted: false,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    }\n\n    fs.appendFile(DB_FILE_PATH, JsonToDbText([toDoObj]), (err) => {\n      if (err) {\n        return rej(err);\n      }\n      else {\n        return res(todo)\n      }\n    })\n  })\n};"
  },
  {
    "id": 4,
    "title": "Simple HTTP Server with File Read [EASY]",
    "code": "const http = require('http');\nconst fs = require('fs');\n\nconst server = http.createServer((req, res) => {\n  // Your code here\n  if (req.method === 'GET' && req.url === '/read') {\n    // Read file asynchronously\n    fs.readFile('message.txt', 'utf8', (err, data) => {\n      if (err) {\n        // Handle file read errors (e.g., file doesn't exist)\n        res.writeHead(500, { 'Content-Type': 'text/plain' });\n        res.end('Internal Server Error');\n        return;\n      }\n      \n      // Send file content as response\n      res.writeHead(200, { 'Content-Type': 'text/plain' });\n      res.end(data);\n    });\n  } else {\n    // Handle all other routes\n    res.writeHead(404, { 'Content-Type': 'text/plain' });\n    res.end('Not Found');\n  }\n});\n\nserver.listen(3000, () => {\n  console.log('Server is listening on port 3000');\n});\n\nmodule.exports = server;"
  },
  {
    "id": 5,
    "title": "Express API with validation endpoint [MEDIUM]",
    "code": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\n// Create the API here\napp.get('/validatepost', (req, res) => {\n  // Get title and content from query parameters\n  const { title, content } = req.query;\n  \n  // Check if both title and content exist and are not empty strings\n  if (!title || title.trim() === '' || !content || content.trim() === '') {\n    return res.status(400).json({ \n      \"error\": \"Both title and content are required and cannot be empty.\" \n    });\n  }\n  \n  // If validation is successful\n  res.status(200).json({\n    \"message\": \"Validation successful\",\n    \"post\": {\n      \"title\": title,\n      \"content\": content\n    }\n  });\n});\n\napp.listen(port, () => {\n  console.log(`App listening at http://localhost:${port}`);\n});\n\nmodule.exports = { app };"
  },
  {
    "id": 6,
    "title": "Middleware for Query-Based User Validation in Express.js [HARD]",
    "codes": {
      "index.js": "const express = require(\"express\");\nconst dotenv = require(\"dotenv\");\nconst { validateUser } = require(\"./validateMiddleware\");\n\nconst app = express();\ndotenv.config();\n\n// Add middleware here\napp.get(\"/user\", validateUser, (req, res) => {\n    // YOUR CODE\n    const { name, age, city } = req.query;\n    res.status(200).json({\n        message: `Welcome, ${name.trim()} from ${city.trim()}! your age is ${age}`\n    });\n});\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n    console.log(`Server running on http://localhost:${PORT}`);\n});",
      
      "validateMiddleware.js": "function validateUser(req, res, next) {\n    const { name, age, city } = req.query;\n    \n    // Validate name\n    if (!name || typeof name !== 'string') {\n        return res.status(400).json({ error: \"Invalid name\" });\n    }\n    \n    const trimmedName = name.trim();\n    if (trimmedName.length < 4) {\n        return res.status(400).json({ error: \"Invalid name\" });\n    }\n    \n    if (!/^[A-Za-z]+$/.test(trimmedName)) {\n        return res.status(400).json({ error: \"Invalid name\" });\n    }\n    \n    // Validate age\n    if (!age) {\n        return res.status(400).json({ error: \"Invalid age\" });\n    }\n    \n    if (typeof age !== 'string' || !/^\\d+$/.test(age)) {\n        return res.status(400).json({ error: \"Invalid age\" });\n    }\n    \n    const ageNum = parseInt(age, 10);\n    if (isNaN(ageNum) || ageNum < 18 || ageNum > 100) {\n        return res.status(400).json({ error: \"Invalid age\" });\n    }\n    \n    // Check for leading zeros\n    if (age.length > 1 && age.startsWith('0')) {\n        return res.status(400).json({ error: \"Invalid age\" });\n    }\n    \n    // Validate city\n    if (!city || typeof city !== 'string') {\n        return res.status(400).json({ error: \"Invalid city\" });\n    }\n    \n    const trimmedCity = city.trim();\n    if (trimmedCity.length < 4) {\n        return res.status(400).json({ error: \"Invalid city\" });\n    }\n    \n    const validCities = [\"Mumbai\", \"Delhi\", \"Bangalore\", \"Kolkata\"];\n    if (!validCities.includes(trimmedCity)) {\n        return res.status(400).json({ error: \"Invalid city\" });\n    }\n    \n    // All validations passed\n    next();\n}\n\nmodule.exports = { validateUser };"
    }
  },
  {
    "id": 7,
    "title": "Express REST Update-Delete [HARD]",
    "code": "const express = require(\"express\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\nconst app = express();\napp.use(express.json());\n\nconst DB_FILE_PATH = path.join(__dirname, \"db.json\");\n\n// Utility to read users\nconst readUsersFromFile = () => {\n  const data = fs.readFileSync(DB_FILE_PATH, \"utf-8\");\n  return JSON.parse(data);\n};\n\n// Utility to write users\nconst writeUsersToFile = (users) => {\n  fs.writeFileSync(DB_FILE_PATH, JSON.stringify(users, null, 2), \"utf-8\");\n};\n\n// ✅ Task 1: Update user name\napp.patch(\"/users/:id\", (req, res) => {\n  const userId = req.params.id;\n  const { name } = req.body;\n\n  if (!name || typeof name !== \"string\" || name.trim() === \"\") {\n    return res.status(400).json({ error: \"Invalid name\" });\n  }\n\n  const users = readUsersFromFile();\n  const userIndex = users.findIndex((u) => u.id === userId);\n\n  if (userIndex === -1) {\n    return res.status(404).json({ error: \"User does not exist\" });\n  }\n\n  users[userIndex].name = name;\n  writeUsersToFile(users);\n\n  return res.status(200).json(users[userIndex]);\n});\n\n// ✅ Task 2: Delete user\napp.delete(\"/users/:id\", (req, res) => {\n  const userId = req.params.id;\n\n  const users = readUsersFromFile();\n  const userIndex = users.findIndex((u) => u.id === userId);\n\n  if (userIndex === -1) {\n    return res.status(404).json({ error: \"User does not exist\" });\n  }\n\n  const deletedUser = users.splice(userIndex, 1)[0];\n  writeUsersToFile(users);\n\n  return res.status(200).json(deletedUser);\n});\n\n// Start the server\napp.listen(3000, () => {\n  console.log(\"Server running on http://localhost:3000\");\n});\n\nmodule.exports = app;"
  },
  {
    "id": 8,
    "title": "Express REST Pagination [MEDIUM]",
    "code": {
      "index.js": "const express = require(\"express\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\nconst app = express();\napp.use(express.json());\n\nconst DB_FILE_PATH = path.join(__dirname, \"db.json\");\n\nconst readUsersFromFile = () => {\n  const data = fs.readFileSync(DB_FILE_PATH, \"utf-8\");\n  return JSON.parse(data);\n};\n\n// GET /users with pagination\napp.get('/users', (req, res) => {\n  const users = readUsersFromFile();\n\n  let { limit, offset } = req.query;\n\n  limit = Number(limit);\n  offset = Number(offset);\n\n  if (isNaN(offset) || offset < 0) offset = 0;\n\n  // If limit is invalid or larger than number of users, return all\n  if (isNaN(limit) || limit >= users.length) {\n    return res.status(200).json(users);\n  }\n\n  const startIndex = offset * limit;\n  const endIndex = startIndex + limit;\n\n  // If offset * limit is out of bounds, return empty array\n  if (startIndex >= users.length) {\n    return res.status(200).json([]);\n  }\n\n  const paginatedUsers = users.slice(startIndex, endIndex);\n  return res.status(200).json(paginatedUsers);\n});\n\napp.listen(3000, () => {\n  console.log(`Server running on http://localhost:3000`);\n});\n\nmodule.exports = app;",
      "readUsersFromFile.js": "const fs = require(\"fs\");\nconst path = require(\"path\");\n\nfunction readUsersFromFile() {\n  const filePath = path.join(__dirname, \"db.json\");\n  const data = fs.readFileSync(filePath, \"utf-8\");\n  return JSON.parse(data);\n}\n\nmodule.exports = { readUsersFromFile };"
    }
  },
  {
    "id": 9,
    "title": "Express REST Sorting [MEDIUM]",
    "code": "const express = require(\"express\");\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\nconst app = express();\napp.use(express.json());\n\nconst DB_FILE_PATH = path.join(__dirname, \"db.json\");\n\nconst readUsersFromFile = () => {\n  const data = fs.readFileSync(DB_FILE_PATH, \"utf-8\");\n  return JSON.parse(data);\n}\n\n// Write your code here..\napp.get(\"/users\", (req, res) => {\n  const { sortBy, order = 'asc' } = req.query;\n  \n  // Validate sortBy parameter\n  if (sortBy !== 'id' && sortBy !== 'name') {\n    return res.status(400).json({ error: \"Invalid sortBy parameter\" });\n  }\n  \n  // Validate order parameter\n  if (order !== 'asc' && order !== 'desc') {\n    return res.status(400).json({ error: \"Invalid order parameter\" });\n  }\n  \n  const users = readUsersFromFile();\n  \n  // Sort users based on criteria\n  let sortedUsers;\n  \n  if (sortBy === 'id') {\n    sortedUsers = users.sort((a, b) => {\n      const idA = parseInt(a.id);\n      const idB = parseInt(b.id);\n      return order === 'asc' ? idA - idB : idB - idA;\n    });\n  } else if (sortBy === 'name') {\n    sortedUsers = users.sort((a, b) => {\n      if (order === 'asc') {\n        return a.name.localeCompare(b.name);\n      } else {\n        return b.name.localeCompare(a.name);\n      }\n    });\n  }\n  \n  res.status(200).json(sortedUsers);\n});\n\napp.listen(3000, () => {\n  console.log(`server running on http://localhost:3000`);\n})\n\nmodule.exports = app;"
  },
  {
    "id": 10,
    "title": "Product: Update by ID [MEDIUM]",
    "code": "const express = require(\"express\");\nconst EventEmitter = require(\"events\");\n\nconst { pool } = require(\"../db/config.js\");\nconst { createProducts, createCart } = require(\"./migration\");\n\nrequire(\"dotenv\").config();\nconst serverStatus = new EventEmitter();\nconst port = process.env.PORT;\nconst app = express();\napp.use(express.json());\n\napp.post(\"/products\", async (req, res) => {\n  const { name, quantity, price } = req.body;\n  if (!name || !quantity || !price) {\n    return res.status(400).json({ error: \"invalid input\" });\n  }\n  try {\n    const [result] = await pool.query(\n      \"INSERT INTO products (name, quantity, price) VALUES (?, ?, ?)\",\n      [name, quantity, price]\n    );\n    return res.status(201).json({ id: result.insertId, name, quantity, price });\n  } catch (err) {\n    if (err.code === \"ER_DUP_ENTRY\") {\n      return res.status(400).json({ error: \"Product name must be unique\" });\n    }\n    console.error(err);\n    return res.status(500).json({ error: \"Failed to create product\" });\n  }\n});\n\napp.put(\"/products/:id\", async (req, res) => {\n  const productId = req.params.id;\n  const { name, quantity, price } = req.body;\n\n  if (isNaN(productId)) {\n    return res.status(400).json({ error: \"Product ID must be a numeric value\" });\n  }\n\n  try {\n    const [existingProducts] = await pool.query(\n      \"SELECT * FROM products WHERE id = ?\",\n      [productId]\n    );\n\n    if (existingProducts.length === 0) {\n      return res.status(404).json({ error: \"Product not found\" });\n    }\n\n    const currentProduct = existingProducts[0];\n\n    if (name && name !== currentProduct.name) {\n      const [existingNames] = await pool.query(\n        \"SELECT id FROM products WHERE name = ? AND id != ?\",\n        [name, productId]\n      );\n      if (existingNames.length > 0) {\n        return res.status(400).json({ error: \"Product name must be unique\" });\n      }\n    }\n\n    const updateFields = [];\n    const updateValues = [];\n\n    if (name !== undefined) {\n      updateFields.push(\"name = ?\");\n      updateValues.push(name);\n    }\n\n    if (quantity !== undefined) {\n      updateFields.push(\"quantity = ?\");\n      updateValues.push(quantity);\n    }\n\n    if (price !== undefined) {\n      updateFields.push(\"price = ?\");\n      updateValues.push(price);\n    }\n\n    if (updateFields.length === 0) {\n      return res.status(400).json({ error: \"No fields provided for update\" });\n    }\n\n    updateValues.push(productId);\n    const updateQuery = `UPDATE products SET ${updateFields.join(\", \")} WHERE id = ?`;\n    await pool.query(updateQuery, updateValues);\n\n    const [updatedProducts] = await pool.query(\n      \"SELECT * FROM products WHERE id = ?\",\n      [productId]\n    );\n\n    const updatedProduct = updatedProducts[0];\n\n    return res.status(200).json({\n      message: \"Product is updated successfully\",\n      updatedData: {\n        id: updatedProduct.id,\n        name: updatedProduct.name,\n        quantity: updatedProduct.quantity,\n        price: updatedProduct.price\n      }\n    });\n  } catch (err) {\n    console.error(\"Error updating product:\", err);\n    if (err.code === \"ER_DUP_ENTRY\") {\n      return res.status(400).json({ error: \"Product name must be unique\" });\n    }\n    return res.status(500).json({ error: \"Failed to update product\" });\n  }\n});\n\npool\n  .getConnection()\n  .then(() => {\n    console.log(\"db connected\");\n  })\n  .then(createProducts)\n  .then(() => {\n    console.log(\"products table created\");\n  })\n  .then(createCart)\n  .then(() => {\n    console.log(\"cart table created\");\n  })\n  .then(() => {\n    app.listen(port, () => {\n      console.log(`Server running at http://localhost:${port}`);\n      serverStatus.emit(\"accepting api calls\");\n    });\n  }).catch((err) => console.log(err));\n\nmodule.exports = { app, serverStatus };"
  }
  
]
